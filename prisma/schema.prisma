// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  email      String     @unique
  name       String
  password   String
  hash       String?
  lang       String?
  emailCode  String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  categories Category[]
  accounts   Account[]
  tags       Tag[]

  @@index([email])
  @@map("users")
}

model Account {
  id           Int           @id @default(autoincrement())
  name         String
  description  String?
  balance      Float         @default(0)
  type         AccountType
  userId       Int
  currencyId   Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id])
  currency     Currency      @relation(fields: [currencyId], references: [id])
  transactions Transaction[]

  @@index([userId])
  @@map("accounts")
}

model Category {
  id           Int           @id @default(autoincrement())
  name         String
  limit        Float
  userId       Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]

  @@index([userId])
  @@map("categories")
}

model Currency {
  id        Int       @id @default(autoincrement())
  name      String
  shortName String
  logoUrl   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accounts  Account[]

  @@map("currencies")
}

model Transaction {
  id          Int             @id @default(autoincrement())
  description String?
  amount      Float
  date        DateTime
  type        TransactionType
  accountId   Int
  categoryId  Int
  tagId       Int?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  account     Account         @relation(fields: [accountId], references: [id])
  category    Category        @relation(fields: [categoryId], references: [id])
  tag         Tag?            @relation(fields: [tagId], references: [id])

  @@index([accountId])
  @@index([categoryId])
  @@index([tagId])
  @@map("transactions")
}

model Tag {
  id           Int           @id @default(autoincrement())
  name         String
  userId       Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]

  @@index([userId])
  @@map("tags")
}

enum TransactionType {
  INPUT
  OUTPUT
}

enum AccountType {
  WALLET
  CARD
}
